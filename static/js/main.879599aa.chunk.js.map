{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","React","Component","Track","addTrack","removeTrack","isRemoval","onClick","onAdd","track","onRemove","name","artist","album","renderAction","Tracklist","tracks","map","onRemoval","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","haaders","Authorization","then","response","json","jsonResponse","items","uri","savePlaylist","trackUris","length","userId","headers","method","body","JSON","stringify","playlistId","header","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","addTtrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.879599aa.chunk.js","sourcesContent":["const clientId = 'dad36e3c4f7448c796a1a16968d8078c';\r\nconst redirectUri = 'http://locahost:3000/';\r\n\r\nlet accessToken; \r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n    //check for access token match\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      //this is going to clear the parametes and allow to grab new access token when it expires.\r\n      window.setTimeout(() => accessToken = '', expiresIn *1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}D&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  }, \r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \r\n    { haaders : {\r\n      Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if(!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artist[0].name,\r\n        album: track.album.name,\r\n        uri: track.uri\r\n      }));\r\n    })\r\n  }, \r\n  savePlaylist(name, trackUris) {\r\n    if(!name || !trackUris.length) {\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}`};\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n      {\r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({ name: name })\r\n      }).then(jsonResponse => {\r\n        const playlistId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com//v1/users/${userId}/playlists/${playlistId}/tracks`,\r\n        {\r\n          header: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({uris: trackUris })\r\n        })\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: ''\r\n    };\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n\r\n  search() {\r\n    this.props.onSearch = (this.state.term)\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({term:event.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input placeholder=\"Enter A Song, Album, or Artist\"\r\n               onChange = {this.handleTermChange} />\r\n        <button className=\"SearchButton\">SEARCH</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  renderAction() {\r\n    if(this.props.isRemoval) {\r\n      return <button className=\"Track-action\" onClick={this.removeTrack}> - </button>\r\n    } else {\r\n      return <button className=\"Track-action\" onClick={this.addTrack}> + </button>\r\n    }\r\n  }\r\n\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album} </p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    ); \r\n  }  \r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './Tracklist.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass Tracklist extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TrackList\">\r\n          {\r\n            this.props.tracks.map(track => {\r\n              return <Track track={track}\r\n                            key={track.id}\r\n                            onAdd={this.props.onAdd} \r\n                            onRemoval={this.props.onRemove}\r\n                            isRemoval={this.props.isRemoval} />\r\n            })\r\n          }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tracklist;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport Tracklist from '../Tracklist/Tracklist';\r\n\r\nclass SearchResults extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <Tracklist tracks={this.props.searchResults} \r\n                    onAdd={this.props.onAdd}\r\n                    isRemoval={false}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport Tracklist from '../Tracklist/Tracklist';\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n  \r\n  handleNameChange(event) {\r\n    this.props.onNameChange(event.target.value);\r\n  } \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input defaultValue={\"New Playlist\"}\r\n               onChange={this.handleNameChange} />\r\n        <Tracklist tracks={this.props.playlistTracks}\r\n                  onRemove={this.props.onRemove} \r\n                  isRemoval={true} />\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\r\nimport './App.css';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\nimport Spotify from '../../util/Spotify';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchResults : [], \r\n      playlistName: 'My Playlist',\r\n      playlistTracks: []\r\n    };\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n  }\r\n\r\n  addTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    if(tracks.find(savedTrack => savedTrack.id === track.id)) {\r\n      return;\r\n    }  \r\n    tracks.push(track);\r\n    this.setState({playlistTracks: tracks});\r\n  }\r\n  removeTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\r\n    return this.setState({playlistTracks: tracks});\r\n  }\r\n\r\n  updatePlaylistName(name) {\r\n    this.setState({playlistName: name});\r\n  }\r\n  savePlaylist() {\r\n    // alert(\"this method is linked to the button correctly\")\r\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\r\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\r\n      this.setState({\r\n        playlistName: 'New Playlist',\r\n        playlistTracks: []\r\n      })\r\n    })\r\n  }\r\n\r\n  search(term) {\r\n    Spotify.search(term).then(searchResults => {\r\n      this.setState = ({searchResults: searchResults})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n        <div className=\"App\">\r\n          <SearchBar onSearch = {this.search} />\r\n          <div className=\"App-playlist\">\r\n            <SearchResults searchResults={this.state.searchResults} \r\n                           onAdd={this.addTtrack} />\r\n            <Playlist playlistName={this.state.playlistName} \r\n                      playlistTracks={this.state.playlistTracks}\r\n                      onRemove={this.removeTrack}\r\n                      onNameChange={this.updatePlaylistName}\r\n                      onSave = {this.savePlaylist} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}